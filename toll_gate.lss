
toll_gate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00000d48  00000ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a6  008000ce  008000ce  00000e4a  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000204  00000000  00000000  00000e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c33  00000000  00000000  0000108e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000474  00000000  00000000  00001cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b91  00000000  00000000  00002135  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00002cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031e  00000000  00000000  00002ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000066c  00000000  00000000  000031f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  00003862  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	c2 c0       	rjmp	.+388    	; 0x19c <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e4       	ldi	r30, 0x48	; 72
  3a:	fd e0       	ldi	r31, 0x0D	; 13
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ae 3c       	cpi	r26, 0xCE	; 206
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	ae ec       	ldi	r26, 0xCE	; 206
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 37       	cpi	r26, 0x74	; 116
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	2d d2       	rcall	.+1114   	; 0x4b4 <main>
  5a:	74 c6       	rjmp	.+3304   	; 0xd44 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <serial_init>:
volatile int8_t UQEnd;


void serial_init(uint16_t baudrate)
{
uint16_t ubrrvalue = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
  5e:	9c 01       	movw	r18, r24
  60:	40 e0       	ldi	r20, 0x00	; 0
  62:	50 e0       	ldi	r21, 0x00	; 0
  64:	ca 01       	movw	r24, r20
  66:	b9 01       	movw	r22, r18
  68:	60 5a       	subi	r22, 0xA0	; 160
  6a:	7c 41       	sbci	r23, 0x1C	; 28
  6c:	89 4e       	sbci	r24, 0xE9	; 233
  6e:	9f 4f       	sbci	r25, 0xFF	; 255
  70:	f3 e0       	ldi	r31, 0x03	; 3
  72:	66 0f       	add	r22, r22
  74:	77 1f       	adc	r23, r23
  76:	88 1f       	adc	r24, r24
  78:	99 1f       	adc	r25, r25
  7a:	fa 95       	dec	r31
  7c:	d1 f7       	brne	.-12     	; 0x72 <serial_init+0x14>
  7e:	e4 e0       	ldi	r30, 0x04	; 4
  80:	22 0f       	add	r18, r18
  82:	33 1f       	adc	r19, r19
  84:	44 1f       	adc	r20, r20
  86:	55 1f       	adc	r21, r21
  88:	ea 95       	dec	r30
  8a:	d1 f7       	brne	.-12     	; 0x80 <serial_init+0x22>
  8c:	56 d4       	rcall	.+2220   	; 0x93a <__udivmodsi4>
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	30 40       	sbci	r19, 0x00	; 0
	//Setup q
	UQFront=UQEnd=-1;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	80 93 f1 00 	sts	0x00F1, r24
  98:	80 91 f1 00 	lds	r24, 0x00F1
  9c:	80 93 f0 00 	sts	0x00F0, r24

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
  a0:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)ubrrvalue;
  a2:	29 b9       	out	0x09, r18	; 9
	UCSRC=(1<<URSEL)|(3<<UCSZ0);
  a4:	86 e8       	ldi	r24, 0x86	; 134
  a6:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
  a8:	88 e9       	ldi	r24, 0x98	; 152
  aa:	8a b9       	out	0x0a, r24	; 10
	sei();
  ac:	78 94       	sei

}
  ae:	08 95       	ret

000000b0 <serial_read>:
unsigned char serial_read()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
  b0:	80 91 f0 00 	lds	r24, 0x00F0
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	11 f4       	brne	.+4      	; 0xbc <serial_read+0xc>
  b8:	e0 e0       	ldi	r30, 0x00	; 0
  ba:	1d c0       	rjmp	.+58     	; 0xf6 <serial_read+0x46>
		return 0;
	
	data=URBuff[UQFront];
  bc:	e0 91 f0 00 	lds	r30, 0x00F0
  c0:	ff 27       	eor	r31, r31
  c2:	e7 fd       	sbrc	r30, 7
  c4:	f0 95       	com	r31
  c6:	ee 50       	subi	r30, 0x0E	; 14
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	e0 81       	ld	r30, Z
	
	if(UQFront==UQEnd)
  cc:	90 91 f0 00 	lds	r25, 0x00F0
  d0:	80 91 f1 00 	lds	r24, 0x00F1
  d4:	98 17       	cp	r25, r24
  d6:	41 f4       	brne	.+16     	; 0xe8 <serial_read+0x38>
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	80 93 f1 00 	sts	0x00F1, r24
  de:	80 91 f1 00 	lds	r24, 0x00F1
  e2:	80 93 f0 00 	sts	0x00F0, r24
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <serial_read+0x46>
	}
	else
	{
		UQFront++;
  e8:	80 91 f0 00 	lds	r24, 0x00F0
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 f0 00 	sts	0x00F0, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
  f2:	80 91 f0 00 	lds	r24, 0x00F0
		UQFront=0;
	}

	return data;
}
  f6:	8e 2f       	mov	r24, r30
  f8:	08 95       	ret

000000fa <serial_char>:

void serial_char(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
  fa:	5d 9b       	sbis	0x0b, 5	; 11
  fc:	fe cf       	rjmp	.-4      	; 0xfa <serial_char>

	//Now write
	UDR=data;
  fe:	8c b9       	out	0x0c, r24	; 12
}
 100:	08 95       	ret

00000102 <serial_string>:
 ltoa( num , buffer, 10);
    serial_string(buffer);
}

void serial_string(char *str)
{
 102:	fc 01       	movw	r30, r24
 104:	04 c0       	rjmp	.+8      	; 0x10e <serial_string+0xc>
}

void serial_char(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 106:	5d 9b       	sbis	0x0b, 5	; 11
 108:	fe cf       	rjmp	.-4      	; 0x106 <serial_string+0x4>

	//Now write
	UDR=data;
 10a:	8c b9       	out	0x0c, r24	; 12
void serial_string(char *str)
{
	while((*str)!='\0')
	{
		serial_char(*str);
		str++;
 10c:	31 96       	adiw	r30, 0x01	; 1
    serial_string(buffer);
}

void serial_string(char *str)
{
	while((*str)!='\0')
 10e:	80 81       	ld	r24, Z
 110:	88 23       	and	r24, r24
 112:	c9 f7       	brne	.-14     	; 0x106 <serial_string+0x4>
	{
		serial_char(*str);
		str++;
	}
}
 114:	08 95       	ret

00000116 <UReadBuffer>:

void UReadBuffer(void *buff,uint16_t len)
{
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	7c 01       	movw	r14, r24
 124:	8b 01       	movw	r16, r22
 126:	c0 e0       	ldi	r28, 0x00	; 0
 128:	d0 e0       	ldi	r29, 0x00	; 0
 12a:	06 c0       	rjmp	.+12     	; 0x138 <UReadBuffer+0x22>
	uint16_t i;
	for(i=0;i<len;i++)
	{
		((char*)buff)[i]=serial_read();
 12c:	c1 df       	rcall	.-126    	; 0xb0 <serial_read>
 12e:	f7 01       	movw	r30, r14
 130:	ec 0f       	add	r30, r28
 132:	fd 1f       	adc	r31, r29
 134:	80 83       	st	Z, r24
}

void UReadBuffer(void *buff,uint16_t len)
{
	uint16_t i;
	for(i=0;i<len;i++)
 136:	21 96       	adiw	r28, 0x01	; 1
 138:	c0 17       	cp	r28, r16
 13a:	d1 07       	cpc	r29, r17
 13c:	b8 f3       	brcs	.-18     	; 0x12c <UReadBuffer+0x16>
	{
		((char*)buff)[i]=serial_read();
	}
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	ff 90       	pop	r15
 148:	ef 90       	pop	r14
 14a:	08 95       	ret

0000014c <serialdata_available>:

uint8_t serialdata_available()
{
	if(UQFront==-1) return 0;
 14c:	80 91 f0 00 	lds	r24, 0x00F0
 150:	8f 3f       	cpi	r24, 0xFF	; 255
 152:	11 f4       	brne	.+4      	; 0x158 <serialdata_available+0xc>
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	1a c0       	rjmp	.+52     	; 0x18c <serialdata_available+0x40>
	if(UQFront<UQEnd)
 158:	90 91 f0 00 	lds	r25, 0x00F0
 15c:	80 91 f1 00 	lds	r24, 0x00F1
 160:	98 17       	cp	r25, r24
 162:	34 f4       	brge	.+12     	; 0x170 <serialdata_available+0x24>
		return(UQEnd-UQFront+1);
 164:	90 91 f1 00 	lds	r25, 0x00F1
 168:	80 91 f0 00 	lds	r24, 0x00F0
 16c:	9f 5f       	subi	r25, 0xFF	; 255
 16e:	0d c0       	rjmp	.+26     	; 0x18a <serialdata_available+0x3e>
	else if(UQFront>UQEnd)
 170:	90 91 f0 00 	lds	r25, 0x00F0
 174:	80 91 f1 00 	lds	r24, 0x00F1
 178:	89 17       	cp	r24, r25
 17a:	14 f0       	brlt	.+4      	; 0x180 <serialdata_available+0x34>
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	06 c0       	rjmp	.+12     	; 0x18c <serialdata_available+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
 180:	90 91 f1 00 	lds	r25, 0x00F1
 184:	80 91 f0 00 	lds	r24, 0x00F0
 188:	9f 57       	subi	r25, 0x7F	; 127
 18a:	98 1b       	sub	r25, r24
	else
		return 1;
}
 18c:	89 2f       	mov	r24, r25
 18e:	08 95       	ret

00000190 <UFlushBuffer>:
void UFlushBuffer()
{
 190:	01 c0       	rjmp	.+2      	; 0x194 <UFlushBuffer+0x4>
	while(serialdata_available()>0)
	{
		serial_read();
 192:	8e df       	rcall	.-228    	; 0xb0 <serial_read>
	else
		return 1;
}
void UFlushBuffer()
{
	while(serialdata_available()>0)
 194:	db df       	rcall	.-74     	; 0x14c <serialdata_available>
 196:	88 23       	and	r24, r24
 198:	e1 f7       	brne	.-8      	; 0x192 <UFlushBuffer+0x2>
	{
		serial_read();
	}
}
 19a:	08 95       	ret

0000019c <__vector_11>:


ISR(USART_RXC_VECT)
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	//Read the data
	char data=UDR;
 1b4:	4c b1       	in	r20, 0x0c	; 12

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 1b6:	80 91 f1 00 	lds	r24, 0x00F1
 1ba:	8f 37       	cpi	r24, 0x7F	; 127
 1bc:	21 f4       	brne	.+8      	; 0x1c6 <__vector_11+0x2a>
 1be:	80 91 f0 00 	lds	r24, 0x00F0
 1c2:	88 23       	and	r24, r24
 1c4:	71 f0       	breq	.+28     	; 0x1e2 <__vector_11+0x46>
 1c6:	80 91 f1 00 	lds	r24, 0x00F1
 1ca:	20 91 f0 00 	lds	r18, 0x00F0
 1ce:	99 27       	eor	r25, r25
 1d0:	87 fd       	sbrc	r24, 7
 1d2:	90 95       	com	r25
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	33 27       	eor	r19, r19
 1d8:	27 fd       	sbrc	r18, 7
 1da:	30 95       	com	r19
 1dc:	82 17       	cp	r24, r18
 1de:	93 07       	cpc	r25, r19
 1e0:	39 f4       	brne	.+14     	; 0x1f0 <__vector_11+0x54>
	{
		//Q Full
		UQFront++;
 1e2:	80 91 f0 00 	lds	r24, 0x00F0
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 93 f0 00 	sts	0x00F0, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
 1ec:	80 91 f0 00 	lds	r24, 0x00F0
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 1f0:	80 91 f1 00 	lds	r24, 0x00F1
 1f4:	8f 37       	cpi	r24, 0x7F	; 127
 1f6:	19 f4       	brne	.+6      	; 0x1fe <__vector_11+0x62>
		UQEnd=0;
 1f8:	10 92 f1 00 	sts	0x00F1, r1
 1fc:	05 c0       	rjmp	.+10     	; 0x208 <__vector_11+0x6c>
	else
		UQEnd++;
 1fe:	80 91 f1 00 	lds	r24, 0x00F1
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 f1 00 	sts	0x00F1, r24


	URBuff[UQEnd]=data;
 208:	e0 91 f1 00 	lds	r30, 0x00F1
 20c:	ff 27       	eor	r31, r31
 20e:	e7 fd       	sbrc	r30, 7
 210:	f0 95       	com	r31
 212:	ee 50       	subi	r30, 0x0E	; 14
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
 218:	80 91 f0 00 	lds	r24, 0x00F0
 21c:	8f 3f       	cpi	r24, 0xFF	; 255
 21e:	11 f4       	brne	.+4      	; 0x224 <__vector_11+0x88>
 220:	10 92 f0 00 	sts	0x00F0, r1

}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	4f 91       	pop	r20
 22e:	3f 91       	pop	r19
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 23c:	28 2f       	mov	r18, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 23e:	66 23       	and	r22, r22
 240:	11 f0       	breq	.+4      	; 0x246 <lcd_write+0xa>
       lcd_rs_high();
 242:	a9 9a       	sbi	0x15, 1	; 21
 244:	01 c0       	rjmp	.+2      	; 0x248 <lcd_write+0xc>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 246:	a9 98       	cbi	0x15, 1	; 21
    }
    lcd_rw_low();
 248:	aa 98       	cbi	0x15, 2	; 21

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 24a:	87 b3       	in	r24, 0x17	; 23
 24c:	8f 60       	ori	r24, 0x0F	; 15
 24e:	87 bb       	out	0x17, r24	; 23

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 250:	98 b3       	in	r25, 0x18	; 24
 252:	90 7f       	andi	r25, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 254:	82 2f       	mov	r24, r18
 256:	82 95       	swap	r24
 258:	8f 70       	andi	r24, 0x0F	; 15
 25a:	89 2b       	or	r24, r25
 25c:	88 bb       	out	0x18, r24	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 25e:	ab 9a       	sbi	0x15, 3	; 21
    lcd_e_delay();
 260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_write+0x26>
    lcd_e_low();
 262:	ab 98       	cbi	0x15, 3	; 21
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 264:	2f 70       	andi	r18, 0x0F	; 15
 266:	29 2b       	or	r18, r25
 268:	28 bb       	out	0x18, r18	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 26a:	ab 9a       	sbi	0x15, 3	; 21
    lcd_e_delay();
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_write+0x32>
    lcd_e_low();
 26e:	ab 98       	cbi	0x15, 3	; 21
        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 270:	9f 60       	ori	r25, 0x0F	; 15
 272:	98 bb       	out	0x18, r25	; 24
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 274:	08 95       	ret

00000276 <lcd_waitbusy>:
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 276:	80 e8       	ldi	r24, 0x80	; 128
 278:	93 e1       	ldi	r25, 0x13	; 19
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_waitbusy+0x4>
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <lcd_waitbusy+0xc>
 286:	a9 98       	cbi	0x15, 1	; 21
    lcd_rw_high();                           /* RW=1  read mode      */
 288:	aa 9a       	sbi	0x15, 2	; 21
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 28a:	87 b3       	in	r24, 0x17	; 23
 28c:	80 7f       	andi	r24, 0xF0	; 240
 28e:	87 bb       	out	0x17, r24	; 23
        
        lcd_e_high();
 290:	ab 9a       	sbi	0x15, 3	; 21
        lcd_e_delay();        
 292:	00 c0       	rjmp	.+0      	; 0x294 <lcd_waitbusy+0x1e>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 294:	96 b3       	in	r25, 0x16	; 22
        lcd_e_low();
 296:	ab 98       	cbi	0x15, 3	; 21
        
        lcd_e_delay();                       /* Enable 500ns low       */
 298:	00 c0       	rjmp	.+0      	; 0x29a <lcd_waitbusy+0x24>
        
        lcd_e_high();
 29a:	ab 9a       	sbi	0x15, 3	; 21
        lcd_e_delay();
 29c:	00 c0       	rjmp	.+0      	; 0x29e <lcd_waitbusy+0x28>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 29e:	86 b3       	in	r24, 0x16	; 22
 2a0:	8f 70       	andi	r24, 0x0F	; 15
 2a2:	92 95       	swap	r25
 2a4:	90 7f       	andi	r25, 0xF0	; 240
        lcd_e_low();
 2a6:	ab 98       	cbi	0x15, 3	; 21
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
    
}/* lcd_waitbusy */
 2a8:	89 2b       	or	r24, r25
 2aa:	08 95       	ret

000002ac <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 2ac:	1f 93       	push	r17
 2ae:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 2b0:	e2 df       	rcall	.-60     	; 0x276 <lcd_waitbusy>
    lcd_write(cmd,0);
 2b2:	81 2f       	mov	r24, r17
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	c2 df       	rcall	.-124    	; 0x23c <lcd_write>
}
 2b8:	1f 91       	pop	r17
 2ba:	08 95       	ret

000002bc <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 2bc:	1f 93       	push	r17
 2be:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 2c0:	da df       	rcall	.-76     	; 0x276 <lcd_waitbusy>
    lcd_write(data,1);
 2c2:	81 2f       	mov	r24, r17
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	ba df       	rcall	.-140    	; 0x23c <lcd_write>
}
 2c8:	1f 91       	pop	r17
 2ca:	08 95       	ret

000002cc <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 2cc:	66 23       	and	r22, r22
 2ce:	11 f4       	brne	.+4      	; 0x2d4 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 2d0:	80 58       	subi	r24, 0x80	; 128
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 2d4:	80 54       	subi	r24, 0x40	; 64
 2d6:	ea df       	rcall	.-44     	; 0x2ac <lcd_command>
 2d8:	08 95       	ret

000002da <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 2da:	cd df       	rcall	.-102    	; 0x276 <lcd_waitbusy>
}
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	08 95       	ret

000002e0 <lcd_clear>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clear(void)
{
    lcd_command(1<<LCD_CLR);
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	e4 df       	rcall	.-56     	; 0x2ac <lcd_command>
}
 2e4:	08 95       	ret

000002e6 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	e1 df       	rcall	.-62     	; 0x2ac <lcd_command>
}
 2ea:	08 95       	ret

000002ec <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 2ec:	1f 93       	push	r17
 2ee:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 2f0:	c2 df       	rcall	.-124    	; 0x276 <lcd_waitbusy>
    if (c=='\n')
 2f2:	1a 30       	cpi	r17, 0x0A	; 10
 2f4:	41 f4       	brne	.+16     	; 0x306 <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 2f6:	80 34       	cpi	r24, 0x40	; 64
 2f8:	10 f0       	brcs	.+4      	; 0x2fe <lcd_putc+0x12>
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	01 c0       	rjmp	.+2      	; 0x300 <lcd_putc+0x14>
 2fe:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 300:	80 58       	subi	r24, 0x80	; 128
 302:	d4 df       	rcall	.-88     	; 0x2ac <lcd_command>
 304:	03 c0       	rjmp	.+6      	; 0x30c <lcd_putc+0x20>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 306:	81 2f       	mov	r24, r17
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	98 df       	rcall	.-208    	; 0x23c <lcd_write>
    }

}/* lcd_putc */
 30c:	1f 91       	pop	r17
 30e:	08 95       	ret

00000310 <lcd_string>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_string(const char *s)
/* print string on lcd (no auto linefeed) */
{
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	ec 01       	movw	r28, r24
 316:	01 c0       	rjmp	.+2      	; 0x31a <lcd_string+0xa>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 318:	e9 df       	rcall	.-46     	; 0x2ec <lcd_putc>
void lcd_string(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 31a:	89 91       	ld	r24, Y+
 31c:	88 23       	and	r24, r24
 31e:	e1 f7       	brne	.-8      	; 0x318 <lcd_string+0x8>
        lcd_putc(c);
    }

}/* lcd_string */
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	ec 01       	movw	r28, r24
 32c:	01 c0       	rjmp	.+2      	; 0x330 <lcd_puts_p+0xa>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 32e:	de df       	rcall	.-68     	; 0x2ec <lcd_putc>
 330:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 332:	21 96       	adiw	r28, 0x01	; 1
 334:	84 91       	lpm	r24, Z+
 336:	88 23       	and	r24, r24
 338:	d1 f7       	brne	.-12     	; 0x32e <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <lcd_init>:
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 340:	87 b3       	in	r24, 0x17	; 23
 342:	8f 60       	ori	r24, 0x0F	; 15
 344:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 346:	a1 9a       	sbi	0x14, 1	; 20
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 348:	a2 9a       	sbi	0x14, 2	; 20
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 34a:	a3 9a       	sbi	0x14, 3	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 34c:	80 e8       	ldi	r24, 0x80	; 128
 34e:	9e e3       	ldi	r25, 0x3E	; 62
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <lcd_init+0x10>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 354:	c1 9a       	sbi	0x18, 1	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 356:	c0 9a       	sbi	0x18, 0	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 358:	ab 9a       	sbi	0x15, 3	; 21
    lcd_e_delay();
 35a:	00 c0       	rjmp	.+0      	; 0x35c <lcd_init+0x1c>
    lcd_e_low();
 35c:	ab 98       	cbi	0x15, 3	; 21
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 35e:	80 e8       	ldi	r24, 0x80	; 128
 360:	93 e1       	ldi	r25, 0x13	; 19
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <lcd_init+0x22>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 366:	ab 9a       	sbi	0x15, 3	; 21
    lcd_e_delay();
 368:	00 c0       	rjmp	.+0      	; 0x36a <lcd_init+0x2a>
    lcd_e_low();
 36a:	ab 98       	cbi	0x15, 3	; 21
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 36c:	80 e4       	ldi	r24, 0x40	; 64
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	fc 01       	movw	r30, r24
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <lcd_init+0x32>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 376:	ab 9a       	sbi	0x15, 3	; 21
    lcd_e_delay();
 378:	00 c0       	rjmp	.+0      	; 0x37a <lcd_init+0x3a>
    lcd_e_low();
 37a:	ab 98       	cbi	0x15, 3	; 21
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 37c:	fc 01       	movw	r30, r24
 37e:	31 97       	sbiw	r30, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <lcd_init+0x3e>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 382:	c0 98       	cbi	0x18, 0	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 384:	ab 9a       	sbi	0x15, 3	; 21
    lcd_e_delay();
 386:	00 c0       	rjmp	.+0      	; 0x388 <lcd_init+0x48>
    lcd_e_low();
 388:	ab 98       	cbi	0x15, 3	; 21
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <lcd_init+0x4a>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 38e:	88 e2       	ldi	r24, 0x28	; 40
 390:	8d df       	rcall	.-230    	; 0x2ac <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 392:	88 e0       	ldi	r24, 0x08	; 8
 394:	8b df       	rcall	.-234    	; 0x2ac <lcd_command>
    lcd_clear();                           /* display clear                */ 
 396:	a4 df       	rcall	.-184    	; 0x2e0 <lcd_clear>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 398:	86 e0       	ldi	r24, 0x06	; 6
 39a:	88 df       	rcall	.-240    	; 0x2ac <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 39c:	8c e0       	ldi	r24, 0x0C	; 12
 39e:	86 df       	rcall	.-244    	; 0x2ac <lcd_command>

}/* lcd_init */
 3a0:	08 95       	ret

000003a2 <main_menu>:
#include"lcd.h"
#include"rfid.h"

void main_menu()
{
lcd_gotoxy(0,0);
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	92 df       	rcall	.-220    	; 0x2cc <lcd_gotoxy>
lcd_string("1. REGISTER USER");
 3a8:	80 e6       	ldi	r24, 0x60	; 96
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	b1 df       	rcall	.-158    	; 0x310 <lcd_string>

lcd_gotoxy(0,1);
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	8c df       	rcall	.-232    	; 0x2cc <lcd_gotoxy>
lcd_string("2. VERIFY USER");
 3b4:	81 e7       	ldi	r24, 0x71	; 113
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	ab df       	rcall	.-170    	; 0x310 <lcd_string>
}
 3ba:	08 95       	ret

000003bc <gate_close>:
	 _delay_us(18000);
}
}

void gate_close()
{
 3bc:	ef 92       	push	r14
 3be:	ff 92       	push	r15
 3c0:	0f 93       	push	r16
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	c0 e0       	ldi	r28, 0x00	; 0
 3ca:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3cc:	a8 eb       	ldi	r26, 0xB8	; 184
 3ce:	ea 2e       	mov	r14, r26
 3d0:	ab e0       	ldi	r26, 0x0B	; 11
 3d2:	fa 2e       	mov	r15, r26
int k;
for(k=0;k<15;k++)
{
     write(portc,0,h);
 3d4:	08 ea       	ldi	r16, 0xA8	; 168
 3d6:	1e ed       	ldi	r17, 0xDE	; 222
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	a9 d1       	rcall	.+850    	; 0x738 <write>
 3e6:	c7 01       	movw	r24, r14
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <gate_close+0x2c>
	 _delay_us(1000);
	  write(portc,0,l);
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	40 e0       	ldi	r20, 0x00	; 0
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	9f d1       	rcall	.+830    	; 0x738 <write>
 3fa:	c8 01       	movw	r24, r16
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <gate_close+0x40>
}

void gate_close()
{
int k;
for(k=0;k<15;k++)
 400:	21 96       	adiw	r28, 0x01	; 1
 402:	cf 30       	cpi	r28, 0x0F	; 15
 404:	d1 05       	cpc	r29, r1
 406:	41 f7       	brne	.-48     	; 0x3d8 <gate_close+0x1c>
     write(portc,0,h);
	 _delay_us(1000);
	  write(portc,0,l);
	 _delay_us(19000);
}
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	08 95       	ret

00000416 <gate_open>:
lcd_gotoxy(0,1);
lcd_string("2. VERIFY USER");
}

void gate_open()
{
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	c0 e0       	ldi	r28, 0x00	; 0
 424:	d0 e0       	ldi	r29, 0x00	; 0
 426:	b0 e7       	ldi	r27, 0x70	; 112
 428:	eb 2e       	mov	r14, r27
 42a:	b7 e1       	ldi	r27, 0x17	; 23
 42c:	fb 2e       	mov	r15, r27
int k;
for(k=0;k<15;k++)
{
     write(portc,0,h);
 42e:	00 ef       	ldi	r16, 0xF0	; 240
 430:	12 ed       	ldi	r17, 0xD2	; 210
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	50 e0       	ldi	r21, 0x00	; 0
 43e:	7c d1       	rcall	.+760    	; 0x738 <write>
 440:	c7 01       	movw	r24, r14
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <gate_open+0x2c>
	 _delay_us(2000);
	  write(portc,0,l);
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	40 e0       	ldi	r20, 0x00	; 0
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	72 d1       	rcall	.+740    	; 0x738 <write>
 454:	c8 01       	movw	r24, r16
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <gate_open+0x40>
}

void gate_open()
{
int k;
for(k=0;k<15;k++)
 45a:	21 96       	adiw	r28, 0x01	; 1
 45c:	cf 30       	cpi	r28, 0x0F	; 15
 45e:	d1 05       	cpc	r29, r1
 460:	41 f7       	brne	.-48     	; 0x432 <gate_open+0x1c>
     write(portc,0,h);
	 _delay_us(2000);
	  write(portc,0,l);
	 _delay_us(18000);
}
}
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	1f 91       	pop	r17
 468:	0f 91       	pop	r16
 46a:	ff 90       	pop	r15
 46c:	ef 90       	pop	r14
 46e:	08 95       	ret

00000470 <read_rfid>:
#include"serial.h"
long card_number;
unsigned char card_id[30];
long read_rfid()
{
       while(serialdata_available()<=8);
 470:	6d de       	rcall	.-806    	; 0x14c <serialdata_available>
 472:	89 30       	cpi	r24, 0x09	; 9
 474:	e8 f3       	brcs	.-6      	; 0x470 <read_rfid>
 476:	84 ef       	ldi	r24, 0xF4	; 244
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	2c e2       	ldi	r18, 0x2C	; 44
 47c:	31 e0       	ldi	r19, 0x01	; 1
 47e:	f9 01       	movw	r30, r18
 480:	31 97       	sbiw	r30, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <read_rfid+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 484:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 486:	d9 f7       	brne	.-10     	; 0x47e <read_rfid+0xe>
        _delay_ms(50);
		 serial_read();
 488:	13 de       	rcall	.-986    	; 0xb0 <serial_read>
			    serial_read();	
 48a:	12 de       	rcall	.-988    	; 0xb0 <serial_read>
	   
	    UReadBuffer(card_id,8);	       
 48c:	8e ec       	ldi	r24, 0xCE	; 206
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	68 e0       	ldi	r22, 0x08	; 8
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	40 de       	rcall	.-896    	; 0x116 <UReadBuffer>
		char *eptr;  
		
			return strtol(card_id,  eptr, 16);
 496:	8e ec       	ldi	r24, 0xCE	; 206
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	40 e1       	ldi	r20, 0x10	; 16
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	6d d2       	rcall	.+1242   	; 0x97e <strtol>
 4a4:	9c 01       	movw	r18, r24
 4a6:	44 27       	eor	r20, r20
 4a8:	37 fd       	sbrc	r19, 7
 4aa:	40 95       	com	r20
 4ac:	54 2f       	mov	r21, r20
}
 4ae:	b9 01       	movw	r22, r18
 4b0:	ca 01       	movw	r24, r20
 4b2:	08 95       	ret

000004b4 <main>:
}
}


int main()
{
 4b4:	cf 92       	push	r12
 4b6:	df 92       	push	r13
 4b8:	ef 92       	push	r14
 4ba:	ff 92       	push	r15
 4bc:	0f 93       	push	r16
 4be:	1f 93       	push	r17
 4c0:	df 93       	push	r29
 4c2:	cf 93       	push	r28
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
int i=0;
write(portc,5,h);
 4c8:	83 e0       	ldi	r24, 0x03	; 3
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	65 e0       	ldi	r22, 0x05	; 5
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	41 e0       	ldi	r20, 0x01	; 1
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	31 d1       	rcall	.+610    	; 0x738 <write>

lcd_init();
 4d6:	34 df       	rcall	.-408    	; 0x340 <lcd_init>
serial_init(9600);
 4d8:	80 e8       	ldi	r24, 0x80	; 128
 4da:	95 e2       	ldi	r25, 0x25	; 37
 4dc:	c0 dd       	rcall	.-1152   	; 0x5e <serial_init>
gate_close();
 4de:	6e df       	rcall	.-292    	; 0x3bc <gate_close>
main_menu();
 4e0:	60 df       	rcall	.-320    	; 0x3a2 <main_menu>
int user[i];
 4e2:	cd b6       	in	r12, 0x3d	; 61
 4e4:	de b6       	in	r13, 0x3e	; 62
 4e6:	08 94       	sec
 4e8:	c1 1c       	adc	r12, r1
 4ea:	d1 1c       	adc	r13, r1
 4ec:	00 e0       	ldi	r16, 0x00	; 0
 4ee:	10 e0       	ldi	r17, 0x00	; 0
 4f0:	9c e2       	ldi	r25, 0x2C	; 44
 4f2:	e9 2e       	mov	r14, r25
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	f9 2e       	mov	r15, r25

 while (1)
  {
	if(read(portd,3)==0) //first menu
 4f8:	84 e0       	ldi	r24, 0x04	; 4
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	63 e0       	ldi	r22, 0x03	; 3
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	c8 d0       	rcall	.+400    	; 0x692 <read>
 502:	89 2b       	or	r24, r25
 504:	31 f5       	brne	.+76     	; 0x552 <main+0x9e>
	 {
	 lcd_clear();
 506:	ec de       	rcall	.-552    	; 0x2e0 <lcd_clear>
	 lcd_gotoxy(0,0);
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	df de       	rcall	.-578    	; 0x2cc <lcd_gotoxy>
	 lcd_string("PLACE THE CARD");
 50e:	80 e8       	ldi	r24, 0x80	; 128
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	fe de       	rcall	.-516    	; 0x310 <lcd_string>
	 lcd_gotoxy(0,1);
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	d9 de       	rcall	.-590    	; 0x2cc <lcd_gotoxy>
	 lcd_string("TO REGISTER");
 51a:	8f e8       	ldi	r24, 0x8F	; 143
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	f8 de       	rcall	.-528    	; 0x310 <lcd_string>
			 
	   user[i]=read_rfid();
 520:	a7 df       	rcall	.-178    	; 0x470 <read_rfid>
 522:	f8 01       	movw	r30, r16
 524:	ee 0f       	add	r30, r30
 526:	ff 1f       	adc	r31, r31
 528:	ec 0d       	add	r30, r12
 52a:	fd 1d       	adc	r31, r13
 52c:	71 83       	std	Z+1, r23	; 0x01
 52e:	60 83       	st	Z, r22
	   i=i++;
			   
		lcd_clear();
 530:	d7 de       	rcall	.-594    	; 0x2e0 <lcd_clear>
		lcd_gotoxy(0,0);
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	ca de       	rcall	.-620    	; 0x2cc <lcd_gotoxy>
		lcd_string("CARD REGISTERED");
 538:	8b e9       	ldi	r24, 0x9B	; 155
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	e9 de       	rcall	.-558    	; 0x310 <lcd_string>
 53e:	88 e9       	ldi	r24, 0x98	; 152
 540:	9a e3       	ldi	r25, 0x3A	; 58
 542:	f7 01       	movw	r30, r14
 544:	31 97       	sbiw	r30, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <main+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 548:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 54a:	d9 f7       	brne	.-10     	; 0x542 <main+0x8e>
	 lcd_string("PLACE THE CARD");
	 lcd_gotoxy(0,1);
	 lcd_string("TO REGISTER");
			 
	   user[i]=read_rfid();
	   i=i++;
 54c:	0f 5f       	subi	r16, 0xFF	; 255
 54e:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd_gotoxy(0,0);
		lcd_string("CARD REGISTERED");
			 
		 _delay_ms(1500);
			 
		 main_menu();
 550:	28 df       	rcall	.-432    	; 0x3a2 <main_menu>
		 
	 }
		 
		 
		
     if(read(portc,5)==0) //second menu
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	65 e0       	ldi	r22, 0x05	; 5
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	9b d0       	rcall	.+310    	; 0x692 <read>
 55c:	89 2b       	or	r24, r25
 55e:	61 f6       	brne	.-104    	; 0x4f8 <main+0x44>
	  {
		lcd_clear();
 560:	bf de       	rcall	.-642    	; 0x2e0 <lcd_clear>
	    lcd_gotoxy(0,0);
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	b2 de       	rcall	.-668    	; 0x2cc <lcd_gotoxy>
	    lcd_string("PLACE THE CARD");
 568:	80 e8       	ldi	r24, 0x80	; 128
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	d1 de       	rcall	.-606    	; 0x310 <lcd_string>
		lcd_gotoxy(0,1);
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	ac de       	rcall	.-680    	; 0x2cc <lcd_gotoxy>
		lcd_string("TO VERIFY");
 574:	8b ea       	ldi	r24, 0xAB	; 171
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	cb de       	rcall	.-618    	; 0x310 <lcd_string>
			 
		long temp=0,result=0;
		 temp=read_rfid();
 57a:	7a df       	rcall	.-268    	; 0x470 <read_rfid>
 57c:	ab 01       	movw	r20, r22
 57e:	bc 01       	movw	r22, r24
 580:	20 e0       	ldi	r18, 0x00	; 0
 582:	30 e0       	ldi	r19, 0x00	; 0
		 int j;
			 
		 for(j=0;j<5;j++)
		  { 
		    if(temp==user[j])
 584:	f6 01       	movw	r30, r12
 586:	e2 0f       	add	r30, r18
 588:	f3 1f       	adc	r31, r19
 58a:	80 81       	ld	r24, Z
 58c:	91 81       	ldd	r25, Z+1	; 0x01
 58e:	aa 27       	eor	r26, r26
 590:	97 fd       	sbrc	r25, 7
 592:	a0 95       	com	r26
 594:	ba 2f       	mov	r27, r26
 596:	48 17       	cp	r20, r24
 598:	59 07       	cpc	r21, r25
 59a:	6a 07       	cpc	r22, r26
 59c:	7b 07       	cpc	r23, r27
 59e:	31 f0       	breq	.+12     	; 0x5ac <main+0xf8>
 5a0:	2e 5f       	subi	r18, 0xFE	; 254
 5a2:	3f 4f       	sbci	r19, 0xFF	; 255
			 
		long temp=0,result=0;
		 temp=read_rfid();
		 int j;
			 
		 for(j=0;j<5;j++)
 5a4:	2a 30       	cpi	r18, 0x0A	; 10
 5a6:	31 05       	cpc	r19, r1
 5a8:	69 f7       	brne	.-38     	; 0x584 <main+0xd0>
 5aa:	19 c0       	rjmp	.+50     	; 0x5de <main+0x12a>
		  
						
             if(result==1)
              { 
                       
                 lcd_clear();
 5ac:	99 de       	rcall	.-718    	; 0x2e0 <lcd_clear>
                 lcd_gotoxy(0,0);
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	8c de       	rcall	.-744    	; 0x2cc <lcd_gotoxy>
                 lcd_string("VALID USER");
 5b4:	85 eb       	ldi	r24, 0xB5	; 181
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	ab de       	rcall	.-682    	; 0x310 <lcd_string>
				 
                  gate_open();
 5ba:	2d df       	rcall	.-422    	; 0x416 <gate_open>
 5bc:	80 e3       	ldi	r24, 0x30	; 48
 5be:	95 e7       	ldi	r25, 0x75	; 117
 5c0:	f7 01       	movw	r30, r14
 5c2:	31 97       	sbiw	r30, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <main+0x10e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5c8:	d9 f7       	brne	.-10     	; 0x5c0 <main+0x10c>
			     _delay_ms(3000);
                  gate_close();
 5ca:	f8 de       	rcall	.-528    	; 0x3bc <gate_close>
 5cc:	88 e9       	ldi	r24, 0x98	; 152
 5ce:	9a e3       	ldi	r25, 0x3A	; 58
 5d0:	f7 01       	movw	r30, r14
 5d2:	31 97       	sbiw	r30, 0x01	; 1
 5d4:	f1 f7       	brne	.-4      	; 0x5d2 <main+0x11e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5d8:	d9 f7       	brne	.-10     	; 0x5d0 <main+0x11c>
			     lcd_string("INVALID USER");
			    }
					
			    _delay_ms(1500);
					
			    main_menu();
 5da:	e3 de       	rcall	.-570    	; 0x3a2 <main_menu>
 5dc:	8d cf       	rjmp	.-230    	; 0x4f8 <main+0x44>
                  gate_close();
              }

                else
                {
                 lcd_clear();
 5de:	80 de       	rcall	.-768    	; 0x2e0 <lcd_clear>
                 lcd_gotoxy(0,0);
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	73 de       	rcall	.-794    	; 0x2cc <lcd_gotoxy>
			     lcd_string("INVALID USER");
 5e6:	80 ec       	ldi	r24, 0xC0	; 192
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	92 de       	rcall	.-732    	; 0x310 <lcd_string>
 5ec:	ef cf       	rjmp	.-34     	; 0x5cc <main+0x118>

000005ee <lcd_num>:

/*************************************************************************
Snumber display
*************************************************************************/
void lcd_num(int num)
{
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	df 93       	push	r29
 5f4:	cf 93       	push	r28
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62
 5fa:	27 97       	sbiw	r28, 0x07	; 7
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	f8 94       	cli
 600:	de bf       	out	0x3e, r29	; 62
 602:	0f be       	out	0x3f, r0	; 63
 604:	cd bf       	out	0x3d, r28	; 61
char buffer[7];

 itoa( num , buffer, 10);
 606:	8e 01       	movw	r16, r28
 608:	0f 5f       	subi	r16, 0xFF	; 255
 60a:	1f 4f       	sbci	r17, 0xFF	; 255
 60c:	b8 01       	movw	r22, r16
 60e:	4a e0       	ldi	r20, 0x0A	; 10
 610:	50 e0       	ldi	r21, 0x00	; 0
 612:	01 d3       	rcall	.+1538   	; 0xc16 <itoa>
    lcd_string(buffer);
 614:	c8 01       	movw	r24, r16
 616:	7c de       	rcall	.-776    	; 0x310 <lcd_string>
}
 618:	27 96       	adiw	r28, 0x07	; 7
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	f8 94       	cli
 61e:	de bf       	out	0x3e, r29	; 62
 620:	0f be       	out	0x3f, r0	; 63
 622:	cd bf       	out	0x3d, r28	; 61
 624:	cf 91       	pop	r28
 626:	df 91       	pop	r29
 628:	1f 91       	pop	r17
 62a:	0f 91       	pop	r16
 62c:	08 95       	ret

0000062e <compare>:


int compare(const char *cmd1,const char *cmd2)
{
    unsigned char len;
	len=strlen(cmd2);
 62e:	db 01       	movw	r26, r22
 630:	0d 90       	ld	r0, X+
 632:	00 20       	and	r0, r0
 634:	e9 f7       	brne	.-6      	; 0x630 <compare+0x2>
 636:	11 97       	sbiw	r26, 0x01	; 1
 638:	a6 1b       	sub	r26, r22
 63a:	b7 0b       	sbc	r27, r23
	

if(strncasecmp(cmd1,cmd2,len)==0)
 63c:	4a 2f       	mov	r20, r26
 63e:	50 e0       	ldi	r21, 0x00	; 0
 640:	d2 d2       	rcall	.+1444   	; 0xbe6 <strncasecmp>
 642:	20 e0       	ldi	r18, 0x00	; 0
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	89 2b       	or	r24, r25
 648:	11 f4       	brne	.+4      	; 0x64e <compare+0x20>
 64a:	21 e0       	ldi	r18, 0x01	; 1
 64c:	30 e0       	ldi	r19, 0x00	; 0
{

    return 0;
}

}
 64e:	c9 01       	movw	r24, r18
 650:	08 95       	ret

00000652 <serial_num>:
}



void serial_num(long num)
{
 652:	0f 93       	push	r16
 654:	1f 93       	push	r17
 656:	df 93       	push	r29
 658:	cf 93       	push	r28
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	27 97       	sbiw	r28, 0x07	; 7
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	f8 94       	cli
 664:	de bf       	out	0x3e, r29	; 62
 666:	0f be       	out	0x3f, r0	; 63
 668:	cd bf       	out	0x3d, r28	; 61
	char buffer[7];

 ltoa( num , buffer, 10);
 66a:	8e 01       	movw	r16, r28
 66c:	0f 5f       	subi	r16, 0xFF	; 255
 66e:	1f 4f       	sbci	r17, 0xFF	; 255
 670:	a8 01       	movw	r20, r16
 672:	2a e0       	ldi	r18, 0x0A	; 10
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	ee d2       	rcall	.+1500   	; 0xc54 <ltoa>
    serial_string(buffer);
 678:	c8 01       	movw	r24, r16
 67a:	43 dd       	rcall	.-1402   	; 0x102 <serial_string>
}
 67c:	27 96       	adiw	r28, 0x07	; 7
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	f8 94       	cli
 682:	de bf       	out	0x3e, r29	; 62
 684:	0f be       	out	0x3f, r0	; 63
 686:	cd bf       	out	0x3d, r28	; 61
 688:	cf 91       	pop	r28
 68a:	df 91       	pop	r29
 68c:	1f 91       	pop	r17
 68e:	0f 91       	pop	r16
 690:	08 95       	ret

00000692 <read>:
 692:	83 30       	cpi	r24, 0x03	; 3
 694:	c9 f0       	breq	.+50     	; 0x6c8 <read+0x36>
 696:	84 30       	cpi	r24, 0x04	; 4
 698:	89 f1       	breq	.+98     	; 0x6fc <read+0x6a>
 69a:	82 30       	cpi	r24, 0x02	; 2
 69c:	11 f0       	breq	.+4      	; 0x6a2 <read+0x10>
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	08 95       	ret
 6a2:	69 30       	cpi	r22, 0x09	; 9
 6a4:	19 f4       	brne	.+6      	; 0x6ac <read+0x1a>
 6a6:	17 ba       	out	0x17, r1	; 23
 6a8:	86 b3       	in	r24, 0x16	; 22
 6aa:	08 95       	ret
 6ac:	87 b3       	in	r24, 0x17	; 23
 6ae:	21 e0       	ldi	r18, 0x01	; 1
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	06 2e       	mov	r0, r22
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <read+0x28>
 6b6:	22 0f       	add	r18, r18
 6b8:	33 1f       	adc	r19, r19
 6ba:	0a 94       	dec	r0
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <read+0x24>
 6be:	20 95       	com	r18
 6c0:	28 23       	and	r18, r24
 6c2:	27 bb       	out	0x17, r18	; 23
 6c4:	86 b3       	in	r24, 0x16	; 22
 6c6:	12 c0       	rjmp	.+36     	; 0x6ec <read+0x5a>
 6c8:	69 30       	cpi	r22, 0x09	; 9
 6ca:	19 f4       	brne	.+6      	; 0x6d2 <read+0x40>
 6cc:	14 ba       	out	0x14, r1	; 20
 6ce:	83 b3       	in	r24, 0x13	; 19
 6d0:	08 95       	ret
 6d2:	84 b3       	in	r24, 0x14	; 20
 6d4:	21 e0       	ldi	r18, 0x01	; 1
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	06 2e       	mov	r0, r22
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <read+0x4e>
 6dc:	22 0f       	add	r18, r18
 6de:	33 1f       	adc	r19, r19
 6e0:	0a 94       	dec	r0
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <read+0x4a>
 6e4:	20 95       	com	r18
 6e6:	28 23       	and	r18, r24
 6e8:	24 bb       	out	0x14, r18	; 20
 6ea:	83 b3       	in	r24, 0x13	; 19
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <read+0x62>
 6f0:	95 95       	asr	r25
 6f2:	87 95       	ror	r24
 6f4:	6a 95       	dec	r22
 6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <read+0x5e>
 6f8:	81 70       	andi	r24, 0x01	; 1
 6fa:	08 95       	ret
 6fc:	69 30       	cpi	r22, 0x09	; 9
 6fe:	19 f4       	brne	.+6      	; 0x706 <read+0x74>
 700:	11 ba       	out	0x11, r1	; 17
 702:	80 b3       	in	r24, 0x10	; 16
 704:	08 95       	ret
 706:	31 b3       	in	r19, 0x11	; 17
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	06 2e       	mov	r0, r22
 70e:	02 c0       	rjmp	.+4      	; 0x714 <read+0x82>
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	0a 94       	dec	r0
 716:	e2 f7       	brpl	.-8      	; 0x710 <read+0x7e>
 718:	28 2f       	mov	r18, r24
 71a:	20 95       	com	r18
 71c:	23 23       	and	r18, r19
 71e:	21 bb       	out	0x11, r18	; 17
 720:	22 b3       	in	r18, 0x12	; 18
 722:	82 2b       	or	r24, r18
 724:	82 bb       	out	0x12, r24	; 18
 726:	80 b3       	in	r24, 0x10	; 16
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <read+0x9e>
 72c:	95 95       	asr	r25
 72e:	87 95       	ror	r24
 730:	6a 95       	dec	r22
 732:	e2 f7       	brpl	.-8      	; 0x72c <read+0x9a>
 734:	81 70       	andi	r24, 0x01	; 1
 736:	08 95       	ret

00000738 <write>:
 738:	83 30       	cpi	r24, 0x03	; 3
 73a:	d1 f1       	breq	.+116    	; 0x7b0 <write+0x78>
 73c:	84 30       	cpi	r24, 0x04	; 4
 73e:	09 f4       	brne	.+2      	; 0x742 <write+0xa>
 740:	6b c0       	rjmp	.+214    	; 0x818 <write+0xe0>
 742:	82 30       	cpi	r24, 0x02	; 2
 744:	09 f0       	breq	.+2      	; 0x748 <write+0x10>
 746:	9b c0       	rjmp	.+310    	; 0x87e <write+0x146>
 748:	6b 35       	cpi	r22, 0x5B	; 91
 74a:	21 f4       	brne	.+8      	; 0x754 <write+0x1c>
 74c:	8f ef       	ldi	r24, 0xFF	; 255
 74e:	87 bb       	out	0x17, r24	; 23
 750:	48 bb       	out	0x18, r20	; 24
 752:	08 95       	ret
 754:	44 23       	and	r20, r20
 756:	21 f0       	breq	.+8      	; 0x760 <write+0x28>
 758:	41 30       	cpi	r20, 0x01	; 1
 75a:	09 f0       	breq	.+2      	; 0x75e <write+0x26>
 75c:	90 c0       	rjmp	.+288    	; 0x87e <write+0x146>
 75e:	14 c0       	rjmp	.+40     	; 0x788 <write+0x50>
 760:	69 30       	cpi	r22, 0x09	; 9
 762:	21 f4       	brne	.+8      	; 0x76c <write+0x34>
 764:	8f ef       	ldi	r24, 0xFF	; 255
 766:	87 bb       	out	0x17, r24	; 23
 768:	18 ba       	out	0x18, r1	; 24
 76a:	08 95       	ret
 76c:	87 b3       	in	r24, 0x17	; 23
 76e:	21 e0       	ldi	r18, 0x01	; 1
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <write+0x40>
 774:	22 0f       	add	r18, r18
 776:	33 1f       	adc	r19, r19
 778:	6a 95       	dec	r22
 77a:	e2 f7       	brpl	.-8      	; 0x774 <write+0x3c>
 77c:	82 2b       	or	r24, r18
 77e:	87 bb       	out	0x17, r24	; 23
 780:	88 b3       	in	r24, 0x18	; 24
 782:	20 95       	com	r18
 784:	28 23       	and	r18, r24
 786:	12 c0       	rjmp	.+36     	; 0x7ac <write+0x74>
 788:	69 30       	cpi	r22, 0x09	; 9
 78a:	21 f4       	brne	.+8      	; 0x794 <write+0x5c>
 78c:	8f ef       	ldi	r24, 0xFF	; 255
 78e:	87 bb       	out	0x17, r24	; 23
 790:	88 bb       	out	0x18, r24	; 24
 792:	08 95       	ret
 794:	87 b3       	in	r24, 0x17	; 23
 796:	21 e0       	ldi	r18, 0x01	; 1
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <write+0x68>
 79c:	22 0f       	add	r18, r18
 79e:	33 1f       	adc	r19, r19
 7a0:	6a 95       	dec	r22
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <write+0x64>
 7a4:	82 2b       	or	r24, r18
 7a6:	87 bb       	out	0x17, r24	; 23
 7a8:	88 b3       	in	r24, 0x18	; 24
 7aa:	28 2b       	or	r18, r24
 7ac:	28 bb       	out	0x18, r18	; 24
 7ae:	08 95       	ret
 7b0:	6b 35       	cpi	r22, 0x5B	; 91
 7b2:	21 f4       	brne	.+8      	; 0x7bc <write+0x84>
 7b4:	8f ef       	ldi	r24, 0xFF	; 255
 7b6:	84 bb       	out	0x14, r24	; 20
 7b8:	45 bb       	out	0x15, r20	; 21
 7ba:	08 95       	ret
 7bc:	44 23       	and	r20, r20
 7be:	21 f0       	breq	.+8      	; 0x7c8 <write+0x90>
 7c0:	41 30       	cpi	r20, 0x01	; 1
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <write+0x8e>
 7c4:	5c c0       	rjmp	.+184    	; 0x87e <write+0x146>
 7c6:	14 c0       	rjmp	.+40     	; 0x7f0 <write+0xb8>
 7c8:	69 30       	cpi	r22, 0x09	; 9
 7ca:	21 f4       	brne	.+8      	; 0x7d4 <write+0x9c>
 7cc:	8f ef       	ldi	r24, 0xFF	; 255
 7ce:	84 bb       	out	0x14, r24	; 20
 7d0:	15 ba       	out	0x15, r1	; 21
 7d2:	08 95       	ret
 7d4:	84 b3       	in	r24, 0x14	; 20
 7d6:	21 e0       	ldi	r18, 0x01	; 1
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <write+0xa8>
 7dc:	22 0f       	add	r18, r18
 7de:	33 1f       	adc	r19, r19
 7e0:	6a 95       	dec	r22
 7e2:	e2 f7       	brpl	.-8      	; 0x7dc <write+0xa4>
 7e4:	82 2b       	or	r24, r18
 7e6:	84 bb       	out	0x14, r24	; 20
 7e8:	85 b3       	in	r24, 0x15	; 21
 7ea:	20 95       	com	r18
 7ec:	28 23       	and	r18, r24
 7ee:	12 c0       	rjmp	.+36     	; 0x814 <write+0xdc>
 7f0:	69 30       	cpi	r22, 0x09	; 9
 7f2:	21 f4       	brne	.+8      	; 0x7fc <write+0xc4>
 7f4:	8f ef       	ldi	r24, 0xFF	; 255
 7f6:	84 bb       	out	0x14, r24	; 20
 7f8:	85 bb       	out	0x15, r24	; 21
 7fa:	08 95       	ret
 7fc:	84 b3       	in	r24, 0x14	; 20
 7fe:	21 e0       	ldi	r18, 0x01	; 1
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <write+0xd0>
 804:	22 0f       	add	r18, r18
 806:	33 1f       	adc	r19, r19
 808:	6a 95       	dec	r22
 80a:	e2 f7       	brpl	.-8      	; 0x804 <write+0xcc>
 80c:	82 2b       	or	r24, r18
 80e:	84 bb       	out	0x14, r24	; 20
 810:	85 b3       	in	r24, 0x15	; 21
 812:	28 2b       	or	r18, r24
 814:	25 bb       	out	0x15, r18	; 21
 816:	08 95       	ret
 818:	6b 35       	cpi	r22, 0x5B	; 91
 81a:	21 f4       	brne	.+8      	; 0x824 <write+0xec>
 81c:	8f ef       	ldi	r24, 0xFF	; 255
 81e:	81 bb       	out	0x11, r24	; 17
 820:	42 bb       	out	0x12, r20	; 18
 822:	08 95       	ret
 824:	44 23       	and	r20, r20
 826:	19 f0       	breq	.+6      	; 0x82e <write+0xf6>
 828:	41 30       	cpi	r20, 0x01	; 1
 82a:	49 f5       	brne	.+82     	; 0x87e <write+0x146>
 82c:	15 c0       	rjmp	.+42     	; 0x858 <write+0x120>
 82e:	69 30       	cpi	r22, 0x09	; 9
 830:	21 f4       	brne	.+8      	; 0x83a <write+0x102>
 832:	8f ef       	ldi	r24, 0xFF	; 255
 834:	81 bb       	out	0x11, r24	; 17
 836:	12 ba       	out	0x12, r1	; 18
 838:	08 95       	ret
 83a:	81 b3       	in	r24, 0x11	; 17
 83c:	21 e0       	ldi	r18, 0x01	; 1
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <write+0x10e>
 842:	22 0f       	add	r18, r18
 844:	33 1f       	adc	r19, r19
 846:	6a 95       	dec	r22
 848:	e2 f7       	brpl	.-8      	; 0x842 <write+0x10a>
 84a:	82 2b       	or	r24, r18
 84c:	81 bb       	out	0x11, r24	; 17
 84e:	82 b3       	in	r24, 0x12	; 18
 850:	20 95       	com	r18
 852:	28 23       	and	r18, r24
 854:	22 bb       	out	0x12, r18	; 18
 856:	08 95       	ret
 858:	69 30       	cpi	r22, 0x09	; 9
 85a:	21 f4       	brne	.+8      	; 0x864 <write+0x12c>
 85c:	8f ef       	ldi	r24, 0xFF	; 255
 85e:	81 bb       	out	0x11, r24	; 17
 860:	82 bb       	out	0x12, r24	; 18
 862:	08 95       	ret
 864:	81 b3       	in	r24, 0x11	; 17
 866:	21 e0       	ldi	r18, 0x01	; 1
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	02 c0       	rjmp	.+4      	; 0x870 <write+0x138>
 86c:	22 0f       	add	r18, r18
 86e:	33 1f       	adc	r19, r19
 870:	6a 95       	dec	r22
 872:	e2 f7       	brpl	.-8      	; 0x86c <write+0x134>
 874:	82 2b       	or	r24, r18
 876:	81 bb       	out	0x11, r24	; 17
 878:	82 b3       	in	r24, 0x12	; 18
 87a:	28 2b       	or	r18, r24
 87c:	22 bb       	out	0x12, r18	; 18
 87e:	08 95       	ret

00000880 <direction>:
 880:	83 30       	cpi	r24, 0x03	; 3
 882:	19 f1       	breq	.+70     	; 0x8ca <direction+0x4a>
 884:	84 30       	cpi	r24, 0x04	; 4
 886:	09 f4       	brne	.+2      	; 0x88a <direction+0xa>
 888:	3c c0       	rjmp	.+120    	; 0x902 <direction+0x82>
 88a:	82 30       	cpi	r24, 0x02	; 2
 88c:	09 f0       	breq	.+2      	; 0x890 <direction+0x10>
 88e:	54 c0       	rjmp	.+168    	; 0x938 <direction+0xb8>
 890:	44 23       	and	r20, r20
 892:	21 f0       	breq	.+8      	; 0x89c <direction+0x1c>
 894:	41 30       	cpi	r20, 0x01	; 1
 896:	09 f0       	breq	.+2      	; 0x89a <direction+0x1a>
 898:	4f c0       	rjmp	.+158    	; 0x938 <direction+0xb8>
 89a:	0c c0       	rjmp	.+24     	; 0x8b4 <direction+0x34>
 89c:	27 b3       	in	r18, 0x17	; 23
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <direction+0x28>
 8a4:	88 0f       	add	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	6a 95       	dec	r22
 8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <direction+0x24>
 8ac:	80 95       	com	r24
 8ae:	82 23       	and	r24, r18
 8b0:	87 bb       	out	0x17, r24	; 23
 8b2:	08 95       	ret
 8b4:	27 b3       	in	r18, 0x17	; 23
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <direction+0x40>
 8bc:	88 0f       	add	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	6a 95       	dec	r22
 8c2:	e2 f7       	brpl	.-8      	; 0x8bc <direction+0x3c>
 8c4:	28 2b       	or	r18, r24
 8c6:	27 bb       	out	0x17, r18	; 23
 8c8:	08 95       	ret
 8ca:	44 23       	and	r20, r20
 8cc:	19 f0       	breq	.+6      	; 0x8d4 <direction+0x54>
 8ce:	41 30       	cpi	r20, 0x01	; 1
 8d0:	99 f5       	brne	.+102    	; 0x938 <direction+0xb8>
 8d2:	0c c0       	rjmp	.+24     	; 0x8ec <direction+0x6c>
 8d4:	24 b3       	in	r18, 0x14	; 20
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <direction+0x60>
 8dc:	88 0f       	add	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	6a 95       	dec	r22
 8e2:	e2 f7       	brpl	.-8      	; 0x8dc <direction+0x5c>
 8e4:	80 95       	com	r24
 8e6:	82 23       	and	r24, r18
 8e8:	84 bb       	out	0x14, r24	; 20
 8ea:	08 95       	ret
 8ec:	24 b3       	in	r18, 0x14	; 20
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <direction+0x78>
 8f4:	88 0f       	add	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	6a 95       	dec	r22
 8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <direction+0x74>
 8fc:	28 2b       	or	r18, r24
 8fe:	24 bb       	out	0x14, r18	; 20
 900:	08 95       	ret
 902:	44 23       	and	r20, r20
 904:	19 f0       	breq	.+6      	; 0x90c <direction+0x8c>
 906:	41 30       	cpi	r20, 0x01	; 1
 908:	b9 f4       	brne	.+46     	; 0x938 <direction+0xb8>
 90a:	0c c0       	rjmp	.+24     	; 0x924 <direction+0xa4>
 90c:	21 b3       	in	r18, 0x11	; 17
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	02 c0       	rjmp	.+4      	; 0x918 <direction+0x98>
 914:	88 0f       	add	r24, r24
 916:	99 1f       	adc	r25, r25
 918:	6a 95       	dec	r22
 91a:	e2 f7       	brpl	.-8      	; 0x914 <direction+0x94>
 91c:	80 95       	com	r24
 91e:	82 23       	and	r24, r18
 920:	81 bb       	out	0x11, r24	; 17
 922:	08 95       	ret
 924:	21 b3       	in	r18, 0x11	; 17
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	02 c0       	rjmp	.+4      	; 0x930 <direction+0xb0>
 92c:	88 0f       	add	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	6a 95       	dec	r22
 932:	e2 f7       	brpl	.-8      	; 0x92c <direction+0xac>
 934:	28 2b       	or	r18, r24
 936:	21 bb       	out	0x11, r18	; 17
 938:	08 95       	ret

0000093a <__udivmodsi4>:
 93a:	a1 e2       	ldi	r26, 0x21	; 33
 93c:	1a 2e       	mov	r1, r26
 93e:	aa 1b       	sub	r26, r26
 940:	bb 1b       	sub	r27, r27
 942:	fd 01       	movw	r30, r26
 944:	0d c0       	rjmp	.+26     	; 0x960 <__udivmodsi4_ep>

00000946 <__udivmodsi4_loop>:
 946:	aa 1f       	adc	r26, r26
 948:	bb 1f       	adc	r27, r27
 94a:	ee 1f       	adc	r30, r30
 94c:	ff 1f       	adc	r31, r31
 94e:	a2 17       	cp	r26, r18
 950:	b3 07       	cpc	r27, r19
 952:	e4 07       	cpc	r30, r20
 954:	f5 07       	cpc	r31, r21
 956:	20 f0       	brcs	.+8      	; 0x960 <__udivmodsi4_ep>
 958:	a2 1b       	sub	r26, r18
 95a:	b3 0b       	sbc	r27, r19
 95c:	e4 0b       	sbc	r30, r20
 95e:	f5 0b       	sbc	r31, r21

00000960 <__udivmodsi4_ep>:
 960:	66 1f       	adc	r22, r22
 962:	77 1f       	adc	r23, r23
 964:	88 1f       	adc	r24, r24
 966:	99 1f       	adc	r25, r25
 968:	1a 94       	dec	r1
 96a:	69 f7       	brne	.-38     	; 0x946 <__udivmodsi4_loop>
 96c:	60 95       	com	r22
 96e:	70 95       	com	r23
 970:	80 95       	com	r24
 972:	90 95       	com	r25
 974:	9b 01       	movw	r18, r22
 976:	ac 01       	movw	r20, r24
 978:	bd 01       	movw	r22, r26
 97a:	cf 01       	movw	r24, r30
 97c:	08 95       	ret

0000097e <strtol>:
 97e:	2f 92       	push	r2
 980:	3f 92       	push	r3
 982:	5f 92       	push	r5
 984:	6f 92       	push	r6
 986:	7f 92       	push	r7
 988:	8f 92       	push	r8
 98a:	9f 92       	push	r9
 98c:	af 92       	push	r10
 98e:	bf 92       	push	r11
 990:	cf 92       	push	r12
 992:	df 92       	push	r13
 994:	ef 92       	push	r14
 996:	ff 92       	push	r15
 998:	0f 93       	push	r16
 99a:	1f 93       	push	r17
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
 9a0:	8c 01       	movw	r16, r24
 9a2:	1b 01       	movw	r2, r22
 9a4:	ea 01       	movw	r28, r20
 9a6:	61 15       	cp	r22, r1
 9a8:	71 05       	cpc	r23, r1
 9aa:	19 f0       	breq	.+6      	; 0x9b2 <strtol+0x34>
 9ac:	fb 01       	movw	r30, r22
 9ae:	91 83       	std	Z+1, r25	; 0x01
 9b0:	80 83       	st	Z, r24
 9b2:	20 97       	sbiw	r28, 0x00	; 0
 9b4:	49 f0       	breq	.+18     	; 0x9c8 <strtol+0x4a>
 9b6:	ce 01       	movw	r24, r28
 9b8:	02 97       	sbiw	r24, 0x02	; 2
 9ba:	83 97       	sbiw	r24, 0x23	; 35
 9bc:	28 f0       	brcs	.+10     	; 0x9c8 <strtol+0x4a>
 9be:	20 e0       	ldi	r18, 0x00	; 0
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	40 e0       	ldi	r20, 0x00	; 0
 9c4:	50 e0       	ldi	r21, 0x00	; 0
 9c6:	f3 c0       	rjmp	.+486    	; 0xbae <strtol+0x230>
 9c8:	f8 01       	movw	r30, r16
 9ca:	a1 90       	ld	r10, Z+
 9cc:	8f 01       	movw	r16, r30
 9ce:	8a 2d       	mov	r24, r10
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	01 d1       	rcall	.+514    	; 0xbd6 <isspace>
 9d4:	89 2b       	or	r24, r25
 9d6:	c1 f7       	brne	.-16     	; 0x9c8 <strtol+0x4a>
 9d8:	fd e2       	ldi	r31, 0x2D	; 45
 9da:	af 16       	cp	r10, r31
 9dc:	31 f4       	brne	.+12     	; 0x9ea <strtol+0x6c>
 9de:	f8 01       	movw	r30, r16
 9e0:	a1 90       	ld	r10, Z+
 9e2:	8f 01       	movw	r16, r30
 9e4:	55 24       	eor	r5, r5
 9e6:	53 94       	inc	r5
 9e8:	07 c0       	rjmp	.+14     	; 0x9f8 <strtol+0x7a>
 9ea:	fb e2       	ldi	r31, 0x2B	; 43
 9ec:	af 16       	cp	r10, r31
 9ee:	19 f4       	brne	.+6      	; 0x9f6 <strtol+0x78>
 9f0:	f8 01       	movw	r30, r16
 9f2:	a1 90       	ld	r10, Z+
 9f4:	8f 01       	movw	r16, r30
 9f6:	55 24       	eor	r5, r5
 9f8:	20 97       	sbiw	r28, 0x00	; 0
 9fa:	19 f0       	breq	.+6      	; 0xa02 <strtol+0x84>
 9fc:	c0 31       	cpi	r28, 0x10	; 16
 9fe:	d1 05       	cpc	r29, r1
 a00:	c1 f4       	brne	.+48     	; 0xa32 <strtol+0xb4>
 a02:	f0 e3       	ldi	r31, 0x30	; 48
 a04:	af 16       	cp	r10, r31
 a06:	79 f4       	brne	.+30     	; 0xa26 <strtol+0xa8>
 a08:	f8 01       	movw	r30, r16
 a0a:	80 81       	ld	r24, Z
 a0c:	88 37       	cpi	r24, 0x78	; 120
 a0e:	11 f0       	breq	.+4      	; 0xa14 <strtol+0x96>
 a10:	88 35       	cpi	r24, 0x58	; 88
 a12:	49 f4       	brne	.+18     	; 0xa26 <strtol+0xa8>
 a14:	f8 01       	movw	r30, r16
 a16:	a1 80       	ldd	r10, Z+1	; 0x01
 a18:	0e 5f       	subi	r16, 0xFE	; 254
 a1a:	1f 4f       	sbci	r17, 0xFF	; 255
 a1c:	f2 e0       	ldi	r31, 0x02	; 2
 a1e:	5f 2a       	or	r5, r31
 a20:	c0 e1       	ldi	r28, 0x10	; 16
 a22:	d0 e0       	ldi	r29, 0x00	; 0
 a24:	06 c0       	rjmp	.+12     	; 0xa32 <strtol+0xb4>
 a26:	20 97       	sbiw	r28, 0x00	; 0
 a28:	21 f4       	brne	.+8      	; 0xa32 <strtol+0xb4>
 a2a:	80 e3       	ldi	r24, 0x30	; 48
 a2c:	a8 16       	cp	r10, r24
 a2e:	e9 f4       	brne	.+58     	; 0xa6a <strtol+0xec>
 a30:	27 c0       	rjmp	.+78     	; 0xa80 <strtol+0x102>
 a32:	c8 30       	cpi	r28, 0x08	; 8
 a34:	d1 05       	cpc	r29, r1
 a36:	31 f1       	breq	.+76     	; 0xa84 <strtol+0x106>
 a38:	c9 30       	cpi	r28, 0x09	; 9
 a3a:	d1 05       	cpc	r29, r1
 a3c:	24 f4       	brge	.+8      	; 0xa46 <strtol+0xc8>
 a3e:	c2 30       	cpi	r28, 0x02	; 2
 a40:	d1 05       	cpc	r29, r1
 a42:	31 f5       	brne	.+76     	; 0xa90 <strtol+0x112>
 a44:	0c c0       	rjmp	.+24     	; 0xa5e <strtol+0xe0>
 a46:	ca 30       	cpi	r28, 0x0A	; 10
 a48:	d1 05       	cpc	r29, r1
 a4a:	89 f0       	breq	.+34     	; 0xa6e <strtol+0xf0>
 a4c:	c0 31       	cpi	r28, 0x10	; 16
 a4e:	d1 05       	cpc	r29, r1
 a50:	f9 f4       	brne	.+62     	; 0xa90 <strtol+0x112>
 a52:	c1 2c       	mov	r12, r1
 a54:	d1 2c       	mov	r13, r1
 a56:	e1 2c       	mov	r14, r1
 a58:	b8 e0       	ldi	r27, 0x08	; 8
 a5a:	fb 2e       	mov	r15, r27
 a5c:	27 c0       	rjmp	.+78     	; 0xaac <strtol+0x12e>
 a5e:	c1 2c       	mov	r12, r1
 a60:	d1 2c       	mov	r13, r1
 a62:	e1 2c       	mov	r14, r1
 a64:	a0 e4       	ldi	r26, 0x40	; 64
 a66:	fa 2e       	mov	r15, r26
 a68:	21 c0       	rjmp	.+66     	; 0xaac <strtol+0x12e>
 a6a:	ca e0       	ldi	r28, 0x0A	; 10
 a6c:	d0 e0       	ldi	r29, 0x00	; 0
 a6e:	fc ec       	ldi	r31, 0xCC	; 204
 a70:	cf 2e       	mov	r12, r31
 a72:	fc ec       	ldi	r31, 0xCC	; 204
 a74:	df 2e       	mov	r13, r31
 a76:	fc ec       	ldi	r31, 0xCC	; 204
 a78:	ef 2e       	mov	r14, r31
 a7a:	fc e0       	ldi	r31, 0x0C	; 12
 a7c:	ff 2e       	mov	r15, r31
 a7e:	16 c0       	rjmp	.+44     	; 0xaac <strtol+0x12e>
 a80:	c8 e0       	ldi	r28, 0x08	; 8
 a82:	d0 e0       	ldi	r29, 0x00	; 0
 a84:	c1 2c       	mov	r12, r1
 a86:	d1 2c       	mov	r13, r1
 a88:	e1 2c       	mov	r14, r1
 a8a:	e0 e1       	ldi	r30, 0x10	; 16
 a8c:	fe 2e       	mov	r15, r30
 a8e:	0e c0       	rjmp	.+28     	; 0xaac <strtol+0x12e>
 a90:	9e 01       	movw	r18, r28
 a92:	44 27       	eor	r20, r20
 a94:	37 fd       	sbrc	r19, 7
 a96:	40 95       	com	r20
 a98:	54 2f       	mov	r21, r20
 a9a:	60 e0       	ldi	r22, 0x00	; 0
 a9c:	70 e0       	ldi	r23, 0x00	; 0
 a9e:	80 e0       	ldi	r24, 0x00	; 0
 aa0:	90 e8       	ldi	r25, 0x80	; 128
 aa2:	4b df       	rcall	.-362    	; 0x93a <__udivmodsi4>
 aa4:	c9 01       	movw	r24, r18
 aa6:	da 01       	movw	r26, r20
 aa8:	6c 01       	movw	r12, r24
 aaa:	7d 01       	movw	r14, r26
 aac:	20 e0       	ldi	r18, 0x00	; 0
 aae:	30 e0       	ldi	r19, 0x00	; 0
 ab0:	40 e0       	ldi	r20, 0x00	; 0
 ab2:	50 e0       	ldi	r21, 0x00	; 0
 ab4:	60 e0       	ldi	r22, 0x00	; 0
 ab6:	3e 01       	movw	r6, r28
 ab8:	88 24       	eor	r8, r8
 aba:	77 fc       	sbrc	r7, 7
 abc:	80 94       	com	r8
 abe:	98 2c       	mov	r9, r8
 ac0:	70 ed       	ldi	r23, 0xD0	; 208
 ac2:	b7 2e       	mov	r11, r23
 ac4:	ba 0c       	add	r11, r10
 ac6:	e9 e0       	ldi	r30, 0x09	; 9
 ac8:	eb 15       	cp	r30, r11
 aca:	70 f4       	brcc	.+28     	; 0xae8 <strtol+0x16a>
 acc:	8a 2d       	mov	r24, r10
 ace:	81 54       	subi	r24, 0x41	; 65
 ad0:	8a 31       	cpi	r24, 0x1A	; 26
 ad2:	18 f4       	brcc	.+6      	; 0xada <strtol+0x15c>
 ad4:	99 ec       	ldi	r25, 0xC9	; 201
 ad6:	b9 2e       	mov	r11, r25
 ad8:	06 c0       	rjmp	.+12     	; 0xae6 <strtol+0x168>
 ada:	8a 2d       	mov	r24, r10
 adc:	81 56       	subi	r24, 0x61	; 97
 ade:	8a 31       	cpi	r24, 0x1A	; 26
 ae0:	48 f5       	brcc	.+82     	; 0xb34 <strtol+0x1b6>
 ae2:	89 ea       	ldi	r24, 0xA9	; 169
 ae4:	b8 2e       	mov	r11, r24
 ae6:	ba 0c       	add	r11, r10
 ae8:	8b 2d       	mov	r24, r11
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	8c 17       	cp	r24, r28
 aee:	9d 07       	cpc	r25, r29
 af0:	0c f5       	brge	.+66     	; 0xb34 <strtol+0x1b6>
 af2:	6f 3f       	cpi	r22, 0xFF	; 255
 af4:	d9 f0       	breq	.+54     	; 0xb2c <strtol+0x1ae>
 af6:	c2 16       	cp	r12, r18
 af8:	d3 06       	cpc	r13, r19
 afa:	e4 06       	cpc	r14, r20
 afc:	f5 06       	cpc	r15, r21
 afe:	a8 f0       	brcs	.+42     	; 0xb2a <strtol+0x1ac>
 b00:	ca 01       	movw	r24, r20
 b02:	b9 01       	movw	r22, r18
 b04:	a4 01       	movw	r20, r8
 b06:	93 01       	movw	r18, r6
 b08:	ea d0       	rcall	.+468    	; 0xcde <__mulsi3>
 b0a:	9b 01       	movw	r18, r22
 b0c:	ac 01       	movw	r20, r24
 b0e:	2b 0d       	add	r18, r11
 b10:	31 1d       	adc	r19, r1
 b12:	41 1d       	adc	r20, r1
 b14:	51 1d       	adc	r21, r1
 b16:	21 30       	cpi	r18, 0x01	; 1
 b18:	f0 e0       	ldi	r31, 0x00	; 0
 b1a:	3f 07       	cpc	r19, r31
 b1c:	f0 e0       	ldi	r31, 0x00	; 0
 b1e:	4f 07       	cpc	r20, r31
 b20:	f0 e8       	ldi	r31, 0x80	; 128
 b22:	5f 07       	cpc	r21, r31
 b24:	10 f4       	brcc	.+4      	; 0xb2a <strtol+0x1ac>
 b26:	61 e0       	ldi	r22, 0x01	; 1
 b28:	01 c0       	rjmp	.+2      	; 0xb2c <strtol+0x1ae>
 b2a:	6f ef       	ldi	r22, 0xFF	; 255
 b2c:	f8 01       	movw	r30, r16
 b2e:	a1 90       	ld	r10, Z+
 b30:	8f 01       	movw	r16, r30
 b32:	c6 cf       	rjmp	.-116    	; 0xac0 <strtol+0x142>
 b34:	21 14       	cp	r2, r1
 b36:	31 04       	cpc	r3, r1
 b38:	81 f0       	breq	.+32     	; 0xb5a <strtol+0x1dc>
 b3a:	66 23       	and	r22, r22
 b3c:	31 f0       	breq	.+12     	; 0xb4a <strtol+0x1cc>
 b3e:	01 50       	subi	r16, 0x01	; 1
 b40:	10 40       	sbci	r17, 0x00	; 0
 b42:	f1 01       	movw	r30, r2
 b44:	11 83       	std	Z+1, r17	; 0x01
 b46:	00 83       	st	Z, r16
 b48:	08 c0       	rjmp	.+16     	; 0xb5a <strtol+0x1dc>
 b4a:	51 fe       	sbrs	r5, 1
 b4c:	1a c0       	rjmp	.+52     	; 0xb82 <strtol+0x204>
 b4e:	02 50       	subi	r16, 0x02	; 2
 b50:	10 40       	sbci	r17, 0x00	; 0
 b52:	f1 01       	movw	r30, r2
 b54:	11 83       	std	Z+1, r17	; 0x01
 b56:	00 83       	st	Z, r16
 b58:	14 c0       	rjmp	.+40     	; 0xb82 <strtol+0x204>
 b5a:	67 ff       	sbrs	r22, 7
 b5c:	12 c0       	rjmp	.+36     	; 0xb82 <strtol+0x204>
 b5e:	50 fc       	sbrc	r5, 0
 b60:	05 c0       	rjmp	.+10     	; 0xb6c <strtol+0x1ee>
 b62:	2f ef       	ldi	r18, 0xFF	; 255
 b64:	3f ef       	ldi	r19, 0xFF	; 255
 b66:	4f ef       	ldi	r20, 0xFF	; 255
 b68:	5f e7       	ldi	r21, 0x7F	; 127
 b6a:	04 c0       	rjmp	.+8      	; 0xb74 <strtol+0x1f6>
 b6c:	20 e0       	ldi	r18, 0x00	; 0
 b6e:	30 e0       	ldi	r19, 0x00	; 0
 b70:	40 e0       	ldi	r20, 0x00	; 0
 b72:	50 e8       	ldi	r21, 0x80	; 128
 b74:	82 e2       	ldi	r24, 0x22	; 34
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	90 93 73 01 	sts	0x0173, r25
 b7c:	80 93 72 01 	sts	0x0172, r24
 b80:	16 c0       	rjmp	.+44     	; 0xbae <strtol+0x230>
 b82:	50 fe       	sbrs	r5, 0
 b84:	08 c0       	rjmp	.+16     	; 0xb96 <strtol+0x218>
 b86:	50 95       	com	r21
 b88:	40 95       	com	r20
 b8a:	30 95       	com	r19
 b8c:	21 95       	neg	r18
 b8e:	3f 4f       	sbci	r19, 0xFF	; 255
 b90:	4f 4f       	sbci	r20, 0xFF	; 255
 b92:	5f 4f       	sbci	r21, 0xFF	; 255
 b94:	0c c0       	rjmp	.+24     	; 0xbae <strtol+0x230>
 b96:	57 ff       	sbrs	r21, 7
 b98:	0a c0       	rjmp	.+20     	; 0xbae <strtol+0x230>
 b9a:	82 e2       	ldi	r24, 0x22	; 34
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	90 93 73 01 	sts	0x0173, r25
 ba2:	80 93 72 01 	sts	0x0172, r24
 ba6:	2f ef       	ldi	r18, 0xFF	; 255
 ba8:	3f ef       	ldi	r19, 0xFF	; 255
 baa:	4f ef       	ldi	r20, 0xFF	; 255
 bac:	5f e7       	ldi	r21, 0x7F	; 127
 bae:	b9 01       	movw	r22, r18
 bb0:	ca 01       	movw	r24, r20
 bb2:	df 91       	pop	r29
 bb4:	cf 91       	pop	r28
 bb6:	1f 91       	pop	r17
 bb8:	0f 91       	pop	r16
 bba:	ff 90       	pop	r15
 bbc:	ef 90       	pop	r14
 bbe:	df 90       	pop	r13
 bc0:	cf 90       	pop	r12
 bc2:	bf 90       	pop	r11
 bc4:	af 90       	pop	r10
 bc6:	9f 90       	pop	r9
 bc8:	8f 90       	pop	r8
 bca:	7f 90       	pop	r7
 bcc:	6f 90       	pop	r6
 bce:	5f 90       	pop	r5
 bd0:	3f 90       	pop	r3
 bd2:	2f 90       	pop	r2
 bd4:	08 95       	ret

00000bd6 <isspace>:
 bd6:	91 11       	cpse	r25, r1
 bd8:	6f c0       	rjmp	.+222    	; 0xcb8 <__ctype_isfalse>
 bda:	80 32       	cpi	r24, 0x20	; 32
 bdc:	19 f0       	breq	.+6      	; 0xbe4 <isspace+0xe>
 bde:	89 50       	subi	r24, 0x09	; 9
 be0:	85 50       	subi	r24, 0x05	; 5
 be2:	d0 f7       	brcc	.-12     	; 0xbd8 <isspace+0x2>
 be4:	08 95       	ret

00000be6 <strncasecmp>:
 be6:	fb 01       	movw	r30, r22
 be8:	dc 01       	movw	r26, r24
 bea:	41 50       	subi	r20, 0x01	; 1
 bec:	50 40       	sbci	r21, 0x00	; 0
 bee:	88 f0       	brcs	.+34     	; 0xc12 <strncasecmp+0x2c>
 bf0:	8d 91       	ld	r24, X+
 bf2:	81 34       	cpi	r24, 0x41	; 65
 bf4:	1c f0       	brlt	.+6      	; 0xbfc <strncasecmp+0x16>
 bf6:	8b 35       	cpi	r24, 0x5B	; 91
 bf8:	0c f4       	brge	.+2      	; 0xbfc <strncasecmp+0x16>
 bfa:	80 5e       	subi	r24, 0xE0	; 224
 bfc:	61 91       	ld	r22, Z+
 bfe:	61 34       	cpi	r22, 0x41	; 65
 c00:	1c f0       	brlt	.+6      	; 0xc08 <strncasecmp+0x22>
 c02:	6b 35       	cpi	r22, 0x5B	; 91
 c04:	0c f4       	brge	.+2      	; 0xc08 <strncasecmp+0x22>
 c06:	60 5e       	subi	r22, 0xE0	; 224
 c08:	86 1b       	sub	r24, r22
 c0a:	61 11       	cpse	r22, r1
 c0c:	71 f3       	breq	.-36     	; 0xbea <strncasecmp+0x4>
 c0e:	99 0b       	sbc	r25, r25
 c10:	08 95       	ret
 c12:	88 1b       	sub	r24, r24
 c14:	fc cf       	rjmp	.-8      	; 0xc0e <strncasecmp+0x28>

00000c16 <itoa>:
 c16:	fb 01       	movw	r30, r22
 c18:	9f 01       	movw	r18, r30
 c1a:	e8 94       	clt
 c1c:	42 30       	cpi	r20, 0x02	; 2
 c1e:	bc f0       	brlt	.+46     	; 0xc4e <itoa+0x38>
 c20:	45 32       	cpi	r20, 0x25	; 37
 c22:	ac f4       	brge	.+42     	; 0xc4e <itoa+0x38>
 c24:	4a 30       	cpi	r20, 0x0A	; 10
 c26:	29 f4       	brne	.+10     	; 0xc32 <itoa+0x1c>
 c28:	97 fb       	bst	r25, 7
 c2a:	1e f4       	brtc	.+6      	; 0xc32 <itoa+0x1c>
 c2c:	90 95       	com	r25
 c2e:	81 95       	neg	r24
 c30:	9f 4f       	sbci	r25, 0xFF	; 255
 c32:	64 2f       	mov	r22, r20
 c34:	77 27       	eor	r23, r23
 c36:	72 d0       	rcall	.+228    	; 0xd1c <__udivmodhi4>
 c38:	80 5d       	subi	r24, 0xD0	; 208
 c3a:	8a 33       	cpi	r24, 0x3A	; 58
 c3c:	0c f0       	brlt	.+2      	; 0xc40 <itoa+0x2a>
 c3e:	89 5d       	subi	r24, 0xD9	; 217
 c40:	81 93       	st	Z+, r24
 c42:	cb 01       	movw	r24, r22
 c44:	00 97       	sbiw	r24, 0x00	; 0
 c46:	a9 f7       	brne	.-22     	; 0xc32 <itoa+0x1c>
 c48:	16 f4       	brtc	.+4      	; 0xc4e <itoa+0x38>
 c4a:	5d e2       	ldi	r21, 0x2D	; 45
 c4c:	51 93       	st	Z+, r21
 c4e:	10 82       	st	Z, r1
 c50:	c9 01       	movw	r24, r18
 c52:	35 c0       	rjmp	.+106    	; 0xcbe <strrev>

00000c54 <ltoa>:
 c54:	fa 01       	movw	r30, r20
 c56:	cf 93       	push	r28
 c58:	ff 93       	push	r31
 c5a:	ef 93       	push	r30
 c5c:	22 30       	cpi	r18, 0x02	; 2
 c5e:	3c f1       	brlt	.+78     	; 0xcae <ltoa+0x5a>
 c60:	25 32       	cpi	r18, 0x25	; 37
 c62:	2c f5       	brge	.+74     	; 0xcae <ltoa+0x5a>
 c64:	c2 2f       	mov	r28, r18
 c66:	e8 94       	clt
 c68:	ca 30       	cpi	r28, 0x0A	; 10
 c6a:	49 f4       	brne	.+18     	; 0xc7e <ltoa+0x2a>
 c6c:	97 fb       	bst	r25, 7
 c6e:	3e f4       	brtc	.+14     	; 0xc7e <ltoa+0x2a>
 c70:	90 95       	com	r25
 c72:	80 95       	com	r24
 c74:	70 95       	com	r23
 c76:	61 95       	neg	r22
 c78:	7f 4f       	sbci	r23, 0xFF	; 255
 c7a:	8f 4f       	sbci	r24, 0xFF	; 255
 c7c:	9f 4f       	sbci	r25, 0xFF	; 255
 c7e:	2c 2f       	mov	r18, r28
 c80:	33 27       	eor	r19, r19
 c82:	44 27       	eor	r20, r20
 c84:	55 27       	eor	r21, r21
 c86:	ff 93       	push	r31
 c88:	ef 93       	push	r30
 c8a:	57 de       	rcall	.-850    	; 0x93a <__udivmodsi4>
 c8c:	ef 91       	pop	r30
 c8e:	ff 91       	pop	r31
 c90:	60 5d       	subi	r22, 0xD0	; 208
 c92:	6a 33       	cpi	r22, 0x3A	; 58
 c94:	0c f0       	brlt	.+2      	; 0xc98 <ltoa+0x44>
 c96:	69 5d       	subi	r22, 0xD9	; 217
 c98:	61 93       	st	Z+, r22
 c9a:	b9 01       	movw	r22, r18
 c9c:	ca 01       	movw	r24, r20
 c9e:	60 50       	subi	r22, 0x00	; 0
 ca0:	70 40       	sbci	r23, 0x00	; 0
 ca2:	80 40       	sbci	r24, 0x00	; 0
 ca4:	90 40       	sbci	r25, 0x00	; 0
 ca6:	59 f7       	brne	.-42     	; 0xc7e <ltoa+0x2a>
 ca8:	16 f4       	brtc	.+4      	; 0xcae <ltoa+0x5a>
 caa:	cd e2       	ldi	r28, 0x2D	; 45
 cac:	c1 93       	st	Z+, r28
 cae:	10 82       	st	Z, r1
 cb0:	8f 91       	pop	r24
 cb2:	9f 91       	pop	r25
 cb4:	cf 91       	pop	r28
 cb6:	03 c0       	rjmp	.+6      	; 0xcbe <strrev>

00000cb8 <__ctype_isfalse>:
 cb8:	99 27       	eor	r25, r25
 cba:	88 27       	eor	r24, r24

00000cbc <__ctype_istrue>:
 cbc:	08 95       	ret

00000cbe <strrev>:
 cbe:	dc 01       	movw	r26, r24
 cc0:	fc 01       	movw	r30, r24
 cc2:	67 2f       	mov	r22, r23
 cc4:	71 91       	ld	r23, Z+
 cc6:	77 23       	and	r23, r23
 cc8:	e1 f7       	brne	.-8      	; 0xcc2 <strrev+0x4>
 cca:	32 97       	sbiw	r30, 0x02	; 2
 ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <strrev+0x18>
 cce:	7c 91       	ld	r23, X
 cd0:	6d 93       	st	X+, r22
 cd2:	70 83       	st	Z, r23
 cd4:	62 91       	ld	r22, -Z
 cd6:	ae 17       	cp	r26, r30
 cd8:	bf 07       	cpc	r27, r31
 cda:	c8 f3       	brcs	.-14     	; 0xcce <strrev+0x10>
 cdc:	08 95       	ret

00000cde <__mulsi3>:
 cde:	62 9f       	mul	r22, r18
 ce0:	d0 01       	movw	r26, r0
 ce2:	73 9f       	mul	r23, r19
 ce4:	f0 01       	movw	r30, r0
 ce6:	82 9f       	mul	r24, r18
 ce8:	e0 0d       	add	r30, r0
 cea:	f1 1d       	adc	r31, r1
 cec:	64 9f       	mul	r22, r20
 cee:	e0 0d       	add	r30, r0
 cf0:	f1 1d       	adc	r31, r1
 cf2:	92 9f       	mul	r25, r18
 cf4:	f0 0d       	add	r31, r0
 cf6:	83 9f       	mul	r24, r19
 cf8:	f0 0d       	add	r31, r0
 cfa:	74 9f       	mul	r23, r20
 cfc:	f0 0d       	add	r31, r0
 cfe:	65 9f       	mul	r22, r21
 d00:	f0 0d       	add	r31, r0
 d02:	99 27       	eor	r25, r25
 d04:	72 9f       	mul	r23, r18
 d06:	b0 0d       	add	r27, r0
 d08:	e1 1d       	adc	r30, r1
 d0a:	f9 1f       	adc	r31, r25
 d0c:	63 9f       	mul	r22, r19
 d0e:	b0 0d       	add	r27, r0
 d10:	e1 1d       	adc	r30, r1
 d12:	f9 1f       	adc	r31, r25
 d14:	bd 01       	movw	r22, r26
 d16:	cf 01       	movw	r24, r30
 d18:	11 24       	eor	r1, r1
 d1a:	08 95       	ret

00000d1c <__udivmodhi4>:
 d1c:	aa 1b       	sub	r26, r26
 d1e:	bb 1b       	sub	r27, r27
 d20:	51 e1       	ldi	r21, 0x11	; 17
 d22:	07 c0       	rjmp	.+14     	; 0xd32 <__udivmodhi4_ep>

00000d24 <__udivmodhi4_loop>:
 d24:	aa 1f       	adc	r26, r26
 d26:	bb 1f       	adc	r27, r27
 d28:	a6 17       	cp	r26, r22
 d2a:	b7 07       	cpc	r27, r23
 d2c:	10 f0       	brcs	.+4      	; 0xd32 <__udivmodhi4_ep>
 d2e:	a6 1b       	sub	r26, r22
 d30:	b7 0b       	sbc	r27, r23

00000d32 <__udivmodhi4_ep>:
 d32:	88 1f       	adc	r24, r24
 d34:	99 1f       	adc	r25, r25
 d36:	5a 95       	dec	r21
 d38:	a9 f7       	brne	.-22     	; 0xd24 <__udivmodhi4_loop>
 d3a:	80 95       	com	r24
 d3c:	90 95       	com	r25
 d3e:	bc 01       	movw	r22, r24
 d40:	cd 01       	movw	r24, r26
 d42:	08 95       	ret

00000d44 <_exit>:
 d44:	f8 94       	cli

00000d46 <__stop_program>:
 d46:	ff cf       	rjmp	.-2      	; 0xd46 <__stop_program>
